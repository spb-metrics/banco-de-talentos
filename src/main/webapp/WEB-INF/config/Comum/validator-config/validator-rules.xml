<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE form-validation PUBLIC
          "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.1.3//EN"
          "http://jakarta.apache.org/commons/dtds/validator_1_1_3.dtd">
<!--
  $Header: /home/cvs/jakarta-struts/conf/share/validator-rules.xml,v 1.52 2004/07/25 12:00:20 niallp Exp $
  $Revision: 1.52 $
  $Date: 2004/07/25 12:00:20 $

   This file contains the default Struts Validator pluggable validator
   definitions.  It should be placed somewhere under /WEB-INF and
   referenced in the struts-config.xml under the plug-in element
   for the ValidatorPlugIn.

      <plug-in className="org.apache.struts.validator.ValidatorPlugIn">
        <set-property property="pathnames" value="/WEB-INF/validator-rules.xml,
                                                  /WEB-INF/validation.xml"/>
      </plug-in>

   These are the default error messages associated with
   each validator defined in this file.  They should be
   added to your projects ApplicationResources.properties
   file or you can associate new ones by modifying the
   pluggable validators msg attributes in this file.

   # Struts Validator Error Messages
   errors.required={0} is required.
   errors.minlength={0} can not be less than {1} characters.
   errors.maxlength={0} can not be greater than {1} characters.
   errors.invalid={0} is invalid.

   errors.byte={0} must be a byte.
   errors.short={0} must be a short.
   errors.integer={0} must be an integer.
   errors.long={0} must be a long.
   errors.float={0} must be a float.
   errors.double={0} must be a double.

   errors.date={0} is not a date.
   errors.range={0} is not in the range {1} through {2}.
   errors.creditcard={0} is an invalid credit card number.
   errors.email={0} is an invalid e-mail address.

   Note: Starting in Struts 1.2.0 the default javascript definitions have
         been consolidated to commons-validator. The default can be overridden
         by supplying a <javascript> element with a CDATA section, just as
         in struts 1.1.

-->

<form-validation>

    <global> 
        <validator name="required" classname="org.apache.struts.validator.FieldChecks" 
        method="validateRequired" 
        methodParams="java.lang.Object, 
                      org.apache.commons.validator.ValidatorAction,
                      org.apache.commons.validator.Field,
                      org.apache.struts.action.ActionMessages,
                      javax.servlet.http.HttpServletRequest,
                      javax.servlet.ServletContext"
        msg="errors.required"/> 
            
        <validator name="requiredif" 
        classname="org.apache.struts.validator.FieldChecks" method="validateRequiredIf" 
        methodParams="java.lang.Object,
                      org.apache.commons.validator.ValidatorAction,
                      org.apache.commons.validator.Field,
                      org.apache.struts.action.ActionMessages,
                      javax.servlet.http.HttpServletRequest,
                      javax.servlet.ServletContext"
        msg="errors.required"/>
        
        <validator name="validwhen" 
        classname="org.apache.struts.validator.validwhen.ValidWhen" method="validateValidWhen" 
        methodParams="java.lang.Object,
                      org.apache.commons.validator.ValidatorAction,
                      org.apache.commons.validator.Field,
                      org.apache.struts.action.ActionMessages,
                      javax.servlet.http.HttpServletRequest,
                      javax.servlet.ServletContext"
        msg="errors.required"/> 
                       
        <validator name="minlength" classname="org.apache.struts.validator.FieldChecks" 
        method="validateMinLength" 
        methodParams="java.lang.Object,
                      org.apache.commons.validator.ValidatorAction,
                      org.apache.commons.validator.Field,
                      org.apache.struts.action.ActionMessages,
                      javax.servlet.http.HttpServletRequest,
                      javax.servlet.ServletContext"
        depends="" msg="errors.minlength" 
        jsFunction="org.apache.commons.validator.javascript.validateMinLength"/> 
            
        <validator 
        name="maxlength" classname="org.apache.struts.validator.FieldChecks" 
        method="validateMaxLength" 
        methodParams="java.lang.Object,
                      org.apache.commons.validator.ValidatorAction,
                      org.apache.commons.validator.Field,
                      org.apache.struts.action.ActionMessages,
                      javax.servlet.http.HttpServletRequest,
                      javax.servlet.ServletContext"
        depends="" msg="errors.maxlength" 
        jsFunction="org.apache.commons.validator.javascript.validateMaxLength"/> 
            
        <validator 
        name="mask" classname="org.apache.struts.validator.FieldChecks" method="validateMask"
        methodParams="java.lang.Object,
                      org.apache.commons.validator.ValidatorAction,
                      org.apache.commons.validator.Field,
                      org.apache.struts.action.ActionMessages,
                      javax.servlet.http.HttpServletRequest,
                      javax.servlet.ServletContext"
        depends="" msg="errors.invalid"/> 
        
        <validator name="byte" 
        classname="org.apache.struts.validator.FieldChecks" method="validateByte" 
        methodParams="java.lang.Object,
                      org.apache.commons.validator.ValidatorAction,
                      org.apache.commons.validator.Field,
                      org.apache.struts.action.ActionMessages,
                      javax.servlet.http.HttpServletRequest,
                      javax.servlet.ServletContext"
        depends="" msg="errors.byte" jsFunctionName="ByteValidations"/> 
            
        <validator name="short" 
        classname="org.apache.struts.validator.FieldChecks" method="validateShort" 
        methodParams="java.lang.Object,
                      org.apache.commons.validator.ValidatorAction,
                      org.apache.commons.validator.Field,
                      org.apache.struts.action.ActionMessages,
                      javax.servlet.http.HttpServletRequest,
                      javax.servlet.ServletContext"
        depends="" msg="errors.short" jsFunctionName="ShortValidations"/> 
            
        <validator name="integer" 
        classname="org.apache.struts.validator.FieldChecks" method="validateInteger" 
        methodParams="java.lang.Object,
                      org.apache.commons.validator.ValidatorAction,
                      org.apache.commons.validator.Field,
                      org.apache.struts.action.ActionMessages,
                      javax.servlet.http.HttpServletRequest,
                      javax.servlet.ServletContext"
        depends="" msg="errors.integer" jsFunctionName="IntegerValidations"/> 
            
        <validator 
        name="long" classname="org.apache.struts.validator.FieldChecks" method="validateLong" 
        methodParams="java.lang.Object,
                      org.apache.commons.validator.ValidatorAction,
                      org.apache.commons.validator.Field,
                      org.apache.struts.action.ActionMessages,
                      javax.servlet.http.HttpServletRequest,
                      javax.servlet.ServletContext"
        depends="" msg="errors.long"/> 
            
        <validator name="float" 
        classname="org.apache.struts.validator.FieldChecks" method="validateFloat" 
        methodParams="java.lang.Object,
                      org.apache.commons.validator.ValidatorAction,
                      org.apache.commons.validator.Field,
                      org.apache.struts.action.ActionMessages,
                      javax.servlet.http.HttpServletRequest,
                      javax.servlet.ServletContext"
        depends="" msg="errors.float" jsFunctionName="FloatValidations"/> 
            
        <validator name="double" 
        classname="org.apache.struts.validator.FieldChecks" method="validateDouble" 
        methodParams="java.lang.Object,
                      org.apache.commons.validator.ValidatorAction,
                      org.apache.commons.validator.Field,
                      org.apache.struts.action.ActionMessages,
                      javax.servlet.http.HttpServletRequest,
                      javax.servlet.ServletContext"
        depends="" msg="errors.double"/>
        
        <validator name="date" 
        classname="org.apache.struts.validator.FieldChecks" method="validateDate" 
        methodParams="java.lang.Object,
                      org.apache.commons.validator.ValidatorAction,
                      org.apache.commons.validator.Field,
                      org.apache.struts.action.ActionMessages,
                      javax.servlet.http.HttpServletRequest,
                      javax.servlet.ServletContext"
        depends="" msg="errors.date" jsFunctionName="DateValidations"/>
        
        <validator name="intRange" 
        classname="org.apache.struts.validator.FieldChecks" method="validateIntRange" 
        methodParams="java.lang.Object,
                      org.apache.commons.validator.ValidatorAction,
                      org.apache.commons.validator.Field,
                      org.apache.struts.action.ActionMessages,
                      javax.servlet.http.HttpServletRequest,
                      javax.servlet.ServletContext"
        depends="integer" msg="errors.range"/>
        
        <validator name="floatRange" 
        classname="org.apache.struts.validator.FieldChecks" method="validateFloatRange" 
        methodParams="java.lang.Object,
                      org.apache.commons.validator.ValidatorAction,
                      org.apache.commons.validator.Field,
                      org.apache.struts.action.ActionMessages,
                      javax.servlet.http.HttpServletRequest,
                      javax.servlet.ServletContext"
        depends="float" msg="errors.range"/>
        
        <validator name="creditCard" 
        classname="org.apache.struts.validator.FieldChecks" method="validateCreditCard" 
        methodParams="java.lang.Object,
                      org.apache.commons.validator.ValidatorAction,
                      org.apache.commons.validator.Field,
                      org.apache.struts.action.ActionMessages,
                      javax.servlet.http.HttpServletRequest,
                      javax.servlet.ServletContext"
        depends="" msg="errors.creditcard"/>

        <validator name="email" 
        classname="org.apache.struts.validator.FieldChecks" method="validateEmail" 
        methodParams="java.lang.Object,
                      org.apache.commons.validator.ValidatorAction,
                      org.apache.commons.validator.Field,
                      org.apache.struts.action.ActionMessages,
                      javax.servlet.http.HttpServletRequest,
                      javax.servlet.ServletContext"
        depends="" msg="errors.email"/>
        
        <validator name="url" 
        classname="org.apache.struts.validator.FieldChecks" method="validateUrl" 
        methodParams="java.lang.Object,
                      org.apache.commons.validator.ValidatorAction,
                      org.apache.commons.validator.Field,
                      org.apache.struts.action.ActionMessages,
                      javax.servlet.http.HttpServletRequest,
                      javax.servlet.ServletContext"
        depends="" msg="errors.url"/> 

        <!--
       This simply allows struts to include the validateUtilities into a page, it should
       not be used as a validation rule.
        --> 
        <validator name="includeJavaScriptUtilities" classname="" method="" methodParams="" 
        depends="" msg="" jsFunction="org.apache.commons.validator.javascript.validateUtilities"/> 

      <validator
      		name="cpfCgc"
	        classname="org.apache.struts.validator.FieldChecks"
            method="validateCpfCgc"
			methodParams="java.lang.Object,
							org.apache.commons.validator.ValidatorAction,
							org.apache.commons.validator.Field,
							org.apache.struts.action.ActionErrors,
							javax.servlet.http.HttpServletRequest"
			depends="" msg="">
         <javascript><![CDATA[
            function validateCpfCgc(form) {
                var bValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var strValorCpfCgc = null;
                
                var formName = form.getAttributeNode("name"); 
		        oCpfCgc = eval('new ' + formName.value + '_cpfCgc()');

                for (x in oCpfCgc) {

                		//Obtem o valor do campo e retira a m?scara
                		strValorCpfCgc = form[oCpfCgc[x][0]].value;
                		strValorCpfCgc = strValorCpfCgc.replace(".","");
                		strValorCpfCgc = strValorCpfCgc.replace(".","");
                		strValorCpfCgc = strValorCpfCgc.replace("/","");
                		strValorCpfCgc = strValorCpfCgc.replace("-","");

                		if (strValorCpfCgc.length == 11)
                		{
	                        if (!verificarCPF(strValorCpfCgc)) {
	                            if (i == 0) {
	                                focusField = form[oCpfCgc[x][0]];
	                            }
	                            fields[i++] = oCpfCgc[x][1];
	                            bValid = false;
	                        }                		
                		}
                		else if (strValorCpfCgc.length == 14)
                		{
	                        if (!verificarCGC(strValorCpfCgc)) {
	                            if (i == 0) {
	                                focusField = form[oCpfCgc[x][0]];
	                            }
	                            fields[i++] = oCpfCgc[x][1];
	                            bValid = false;
	                        }                		
                		}
                		else if (strValorCpfCgc.length != 0)
                		{
                            if (i == 0) {
                                focusField = form[oCpfCgc[x][0]];
                            }
							fields[i++] = oCpfCgc[x][1];
                			bValid = false;
                		}
                }

                if (fields.length > 0) {
                    focusField.focus();
                    alert(fields.join('\n'));
                }
                return bValid;
            }

            function verificarCPF(strCPF){
		      var numeros, digitos, soma, i, resultado, digitos_iguais; 
		      
		      digitos_iguais = 1; 
		      if (strCPF.length < 11) 
		            return false; 
		      for (i = 0; i < strCPF.length - 1; i++) 
		            if (strCPF.charAt(i) != strCPF.charAt(i + 1)) 
		                  { 
		                  digitos_iguais = 0; 
		                  break; 
		                  } 
		      if (!digitos_iguais) 
		            {
		            numeros = strCPF.substring(0,9); 
		            digitos = strCPF.substring(9); 
		            soma = 0; 
		            for (i = 10; i > 1; i--) 
		                  soma += numeros.charAt(10 - i) * i; 
		            resultado = soma % 11 < 2 ? 0 : 11 - soma % 11; 
		            if (resultado != digitos.charAt(0)) 
		                  return false; 
		            numeros = strCPF.substring(0,10); 
		            soma = 0; 
		            for (i = 11; i > 1; i--) 
		                  soma += numeros.charAt(11 - i) * i; 
		            resultado = soma % 11 < 2 ? 0 : 11 - soma % 11; 
		            if (resultado != digitos.charAt(1)) 
		                  return false; 
		            return true; 
		            } 
		      else 
		            return false;
		      }
            
            function verificarCGC(strCGC){
		      var numeros, digitos, soma, i, resultado, pos, tamanho, digitos_iguais; 
		      digitos_iguais = 1; 
		      
		      if (strCGC.length < 14 && strCGC.length < 15) 
		            return false; 
		      for (i = 0; i < strCGC.length - 1; i++) 
		            if (strCGC.charAt(i) != strCGC.charAt(i + 1)) 
		                  { 
		                  digitos_iguais = 0; 
		                  break; 
		                  } 
		      if (!digitos_iguais) 
		            { 
		            tamanho = strCGC.length - 2 
		            numeros = strCGC.substring(0,tamanho); 
		            digitos = strCGC.substring(tamanho); 
		            soma = 0; 
		            pos = tamanho - 7; 
		            for (i = tamanho; i >= 1; i--) 
	                  { 
	                  soma += numeros.charAt(tamanho - i) * pos--; 
	                  if (pos < 2) 
	                        pos = 9; 
	                  } 
		            resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
		            if (resultado != digitos.charAt(0)) 
		                  return false; 
		            tamanho = tamanho + 1; 
		            numeros = strCGC.substring(0,tamanho); 
		            soma = 0; 
		            pos = tamanho - 7; 
		            for (i = tamanho; i >= 1; i--) 
		                  { 
		                  soma += numeros.charAt(tamanho - i) * pos--; 
		                  if (pos < 2) 
		                        pos = 9;
		                  } 
		            resultado = soma % 11 < 2 ? 0 : 11 - soma % 11; 
		            if (resultado != digitos.charAt(1)) 
		                  return false; 
		            return true; 
		            } 
		      else 
		            return false;
		    }		      
            ]]>
         </javascript>
		
	  </validator>	
	  		
      <validator
      		name="cpf"
	        classname="org.apache.struts.validator.FieldChecks"
            method="validateCpf"
			methodParams="java.lang.Object,
							org.apache.commons.validator.ValidatorAction,
							org.apache.commons.validator.Field,
							org.apache.struts.action.ActionErrors,
							javax.servlet.http.HttpServletRequest"
			depends="" msg="">
         <javascript><![CDATA[
            function validateCpf(form) {
                var bValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var strValorCPF = null;
                oCpf = new cpf();

                for (x in oCpf) {
                
                		//Obtem o valor do campo e retira a m?scara
                		strValorCPF = form[oCpf[x][0]].value;
						strValorCPF = strValorCPF.replace(".","");
						strValorCPF = strValorCPF.replace(".","");
						strValorCPF = strValorCPF.replace("-","");
						                
                		if (strValorCPF.length == 11)
                		{
	                        if (!verificarCPF(strValorCPF)) {
	                            if (i == 0) {
	                                focusField = form[oCpf[x][0]];
	                            }
	                            fields[i++] = oCpf[x][1];
	                            bValid = false;
	                        }                		
                		}
                		else if (strValorCPF.length =! 0)
                		{
                            if (i == 0) {
                                focusField = form[oCpf[x][0]];
                            }
							fields[i++] = oCpf[x][1];
                			bValid = false;
                		}
                }

                if (fields.length > 0) {
                    focusField.focus();
                    alert(fields.join('\n'));
                }
                return bValid;
            }
            
            function verificarCPF(strCPF){
		      var numeros, digitos, soma, i, resultado, digitos_iguais; 
		      digitos_iguais = 1;

		      if (strCPF.length < 11) 
		            return false; 
		      for (i = 0; i < strCPF.length - 1; i++) 
		            if (strCPF.charAt(i) != strCPF.charAt(i + 1)) 
		                  { 
		                  digitos_iguais = 0; 
		                  break; 
		                  } 
		      if (!digitos_iguais) 
		            {
		            numeros = strCPF.substring(0,9); 
		            digitos = strCPF.substring(9); 
		            soma = 0; 
		            for (i = 10; i > 1; i--) 
		                  soma += numeros.charAt(10 - i) * i; 
		            resultado = soma % 11 < 2 ? 0 : 11 - soma % 11; 
		            if (resultado != digitos.charAt(0)) 
		                  return false; 
		            numeros = strCPF.substring(0,10); 
		            soma = 0; 
		            for (i = 11; i > 1; i--) 
		                  soma += numeros.charAt(11 - i) * i; 
		            resultado = soma % 11 < 2 ? 0 : 11 - soma % 11; 
		            if (resultado != digitos.charAt(1)) 
		                  return false; 
		            return true; 
		            } 
		      else 
		            return false;
		      }
            ]]>
         </javascript>

      </validator>

      <validator
      		name="cgc"
	        classname="org.apache.struts.validator.FieldChecks"
            method="validateCgc"
			methodParams="java.lang.Object,
							org.apache.commons.validator.ValidatorAction,
							org.apache.commons.validator.Field,
							org.apache.struts.action.ActionErrors,
							javax.servlet.http.HttpServletRequest"
			depends="" msg="">
         <javascript><![CDATA[
            function validateCgc(form) {
                var bValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                var strValorCGC = null;
                var formName = form.getAttributeNode("name"); 
				oCgc = eval('new ' + formName.value + '_cgc()');

                for (x in oCgc) {
                		
                		//Obtem o valor do campo e retira a m?scara
                		strValorCGC = form[oCgc[x][0]].value;
						strValorCGC = strValorCGC.replace(".","");
						strValorCGC = strValorCGC.replace(".","");
						strValorCGC = strValorCGC.replace("-","");
						strValorCGC = strValorCGC.replace("/","");
                		
						if (strValorCGC.length == 14)
                		{
	                        if (!verificarCGC(strValorCGC)) {
	                            if (i == 0) {
	                                focusField = form[oCgc[x][0]];
	                            }
	                            fields[i++] = oCgc[x][1];
	                            bValid = false;
	                        }
                		}
                		else if (strValorCGC.length != 0)
                		{
                            if (i == 0) {
                                focusField = form[oCgc[x][0]];
                            }
							fields[i++] = oCgc[x][1];
                			bValid = false;
                		}
                }

                if (fields.length > 0) {
                    focusField.focus();
                    alert(fields.join('\n'));
                }
                return bValid;
            }

            function verificarCGC(strCGC){
		      var numeros, digitos, soma, i, resultado, pos, tamanho, digitos_iguais; 
		      digitos_iguais = 1; 

		      if (strCGC.length < 14 && strCGC.length < 15)
		            return false;
		      for (i = 0; i < strCGC.length - 1; i++) 
		            if (strCGC.charAt(i) != strCGC.charAt(i + 1)) 
		                  {
		                  digitos_iguais = 0; 
		                  break; 
		                  } 
		      if (!digitos_iguais) 
		            {
		            tamanho = strCGC.length - 2 
		            numeros = strCGC.substring(0,tamanho); 
		            digitos = strCGC.substring(tamanho); 
		            soma = 0;
		            pos = tamanho - 7; 
		            for (i = tamanho; i >= 1; i--) 
	                  { 
	                  soma += numeros.charAt(tamanho - i) * pos--; 
	                  if (pos < 2) 
	                        pos = 9; 
	                  } 
		            resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
		            if (resultado != digitos.charAt(0)) 
		                  return false; 
		            tamanho = tamanho + 1; 
		            numeros = strCGC.substring(0,tamanho); 
		            soma = 0; 
		            pos = tamanho - 7; 
		            for (i = tamanho; i >= 1; i--) 
		                  { 
		                  soma += numeros.charAt(tamanho - i) * pos--; 
		                  if (pos < 2) 
		                        pos = 9; 
		                  } 
		            resultado = soma % 11 < 2 ? 0 : 11 - soma % 11; 
		            if (resultado != digitos.charAt(1)) 
		                  return false; 
		            return true; 
		            } 
		      else 
		            return false;
		    }		      
            ]]>
         </javascript>

      </validator>
	  <validator name="compararDatas"
          classname="org.apache.struts.validator.FieldChecks"
          method="validateCompararDatas"
          methodParams="java.lang.Object,
  	               org.apache.commons.validator.ValidatorAction,
		           org.apache.commons.validator.Field,
		           org.apache.struts.action.ActionErrors,
		           javax.servlet.http.HttpServletRequest"
          depends="" msg="">
			
	      <javascript>
	      	<![CDATA[
		        function validateCompararDatas(form) {
		            var isValid = true;
		            var focusField = null;
		            var i = 0;
		            var fields = new Array();
			        var formName = form.getAttributeNode("name"); 
			        oCompararDatas = eval('new ' + formName.value + '_compararDatas()');
		                
		            for (x in oCompararDatas) {
		                if (i == 0) {
		                    focusField = form[oCompararDatas[x][0]];
			            }
	                    var field = form[oCompararDatas[x][0]];
			                    
	                    if ((field.type == 'text' ||
	                         field.type == 'textarea') &&
		                    (field.value.length > 0)) {
			
						    var dataInicial = eval(oCompararDatas[x][2]("dataInicial"));
							var dataFinal = eval(oCompararDatas[x][2]("dataFinal"));
							var opcao = oCompararDatas[x][2]("opcao");
							var data1 = dataInicial;
	    					var data2 = dataFinal;
			
					    	if(data1!= null && data1 != ""){
						    	data1 = trim(data1);
			    			} 
			    			else {
						    	data1 = "";
						    }
				    		if(opcao != "4" && opcao != "5" && opcao != "6"){
							    if(data2!= null && data2 != ""){
								    data2 = trim(data2);
								} 
								else {
									data2 = "";
								}
							} 
			
				    		var dataInicialCompleta = data1.split("/");
			    
						    diaInicial = dataInicialCompleta[0];
						    mesInicial = dataInicialCompleta[1];
			    			anoInicial = dataInicialCompleta[2];
			    
						    inicio = new Date();
						    fim = new Date();
			    
			
						    inicio.setTime(0);        
						    fim.setTime(0);
			
						    inicio.setDate(parseInt(diaInicial,10));
						    inicio.setMonth(parseInt(mesInicial,10)-1);
				    		inicio.setYear(parseInt(anoInicial,10));
			
						    if(opcao == "4" || opcao == "5" || opcao == "6"){
						    	hoje = new Date();
			    				fim.setDate(hoje.getDate());
					    		fim.setMonth(hoje.getMonth());
					    		fim.setYear(hoje.getYear());
						    } 
						    else {   
							    dataFimComplemeta = data2.split("/");    
							    diaFim = dataFimComplemeta[0];
							    mesFim = dataFimComplemeta[1];
							    anoFim = dataFimComplemeta[2];
							    fim.setDate(parseInt(diaFim,10));
						    	fim.setMonth(parseInt(mesFim,10)-1);
							    fim.setYear(parseInt(anoFim,10));
						    }

						    if(opcao == "1"){
							    if(inicio.getTime() == fim.getTime() ) {
						            focusField = form[oCompararDatas[x][0]];
							    } 
							    else {
						    	    isValid = false;
						            fields[i++] = oCompararDatas[x][1];
							    }
						    } 
						    else {
						    	if(opcao == "2") {
								    if(inicio.getTime() < fim.getTime() ) {
							            focusField = form[oCompararDatas[x][0]];
								    } 
								    else {
						    		    isValid = false;
							            fields[i++] = oCompararDatas[x][1];
							    	}
						    	} 
						    	else {
						    		if(opcao == "3") {
									    if(inicio.getTime() <= fim.getTime() ) {
				                		    focusField = form[oCompararDatas[x][0]];
									    } 
									    else {
						    			    isValid = false;
							                fields[i++] = oCompararDatas[x][1];
							    		}
							    	} 
							    	else {
							    		if(opcao == "4") {
										    if(inicio.getTime() == fim.getTime() ) {
					            		        focusField = form[oCompararDatas[x][0]];
										    } 
										    else {
							    			    isValid = false;
								                fields[i++] = oCompararDatas[x][1];
						    				}		
							    		} 
							    		else {
							    			if(opcao == "5") {
											    if(inicio.getTime() <=  fim.getTime()) {
										            focusField = form[oCompararDatas[x][0]];
											    } 
											    else {
								    			    isValid = false;
						  			                fields[i++] = oCompararDatas[x][1];
									    		}		
							    			} 
					    					else {
							    				if(opcao == "6") {
												    if(inicio.getTime() < fim.getTime()) {
											            focusField = form[oCompararDatas[x][0]];
												    } 
												    else {
									    			    isValid = false;
							   			                fields[i++] = oCompararDatas[x][1];
										    		}				
							    				}
							    			}
						    			}
							    	}
						    	}
						    } 
		                }
		            }
		            if (fields.length > 0) {
		                focusField.focus();
					    alert(fields.join('\n'));
					}
					return isValid;
		        }
		
				function trim(s) {
				    while (s.substring(0,1) == " ") {
				        s = s.substring(1,s.length);
				    }
				    while (s.substring(s.length-1,s.length) == " ") {
				        s = s.substring(0,s.length-1);
				    }
				    return s;
				}            
		    ]]>
          </javascript>



	  </validator>
	  <validator name="compararDatasMaisDiferenca"
          classname="org.apache.struts.validator.FieldChecks"
          method="validateCompararDatasMaisDiferenca"
          methodParams="java.lang.Object,
  	               org.apache.commons.validator.ValidatorAction,
		           org.apache.commons.validator.Field,
		           org.apache.struts.action.ActionErrors,
		           javax.servlet.http.HttpServletRequest"
          depends="" msg="">
			
	      <javascript>
	      	<![CDATA[
		        function validateCompararDatasMaisDiferenca(form) {
		            var isValid = true;
		            var focusField = null;
		            var i = 0;
		            var fator = 1;
		            var fields = new Array();
			        var formName = form.getAttributeNode("name"); 

			        oCompararDatasMaisDiferenca = eval('new ' + formName.value + '_compararDatasMaisDiferenca()');
		                

		            for (x in oCompararDatasMaisDiferenca) {
		                if (i == 0) {
		                    focusField = form[oCompararDatasMaisDiferenca[x][0]];
			            }
	                    var field = form[oCompararDatasMaisDiferenca[x][0]];
			                    
	                    if ((field.type == 'text' ||
	                         field.type == 'textarea') &&
		                    (field.value.length > 0)) {
			

						    var dataInicial = eval(oCompararDatasMaisDiferenca[x][2]("primeiraData"));
							var dataFinal = eval(oCompararDatasMaisDiferenca[x][2]("segundaData"));
							var fatorMultiplicacao = eval(oCompararDatasMaisDiferenca[x][2]("fator"));
							var opcao = oCompararDatasMaisDiferenca[x][2]("operacao");
							var data1 = dataInicial;
	    					var data2 = dataFinal;

					    	if(data1!= null && data1 != ""){
						    	data1 = trim(data1);
			    			} 
			    			else {
						    	data1 = "";
						    }
				    		if(opcao != "4" && opcao != "5" && opcao != "6" && opcao !="7"){
							    if(data2!= null && data2 != ""){
								    data2 = trim(data2);
								} 
								else {
									data2 = "";
								}
							} 

				    		var dataInicialCompleta = data1.split("/");
			    
						    diaInicial = dataInicialCompleta[0];
						    mesInicial = dataInicialCompleta[1];
			    			anoInicial = dataInicialCompleta[2];
			    
						    inicio = new Date();
						    fim = new Date();
			    
			
						    inicio.setTime(0);        
						    fim.setTime(0);
			
						    inicio.setDate(parseInt(diaInicial,10));
						    inicio.setMonth(parseInt(mesInicial,10)-1);
				    		inicio.setYear(parseInt(anoInicial,10));

						    if(opcao == "4" || opcao == "5" || opcao == "6"){
						    	hoje = new Date();
			    				fim.setDate(hoje.getDate());
					    		fim.setMonth(hoje.getMonth());
					    		fim.setYear(hoje.getYear());
						    } 					
						    else {
								    dataFimComplemeta = data2.split("/");    
								    diaFim = dataFimComplemeta[0];
								    mesFim = dataFimComplemeta[1];
								    anoFim = dataFimComplemeta[2];
								    fim.setDate(parseInt(diaFim,10));
							    	fim.setMonth(parseInt(mesFim,10)-1);
								    fim.setYear(parseInt(anoFim,10));
						    }

						    if(opcao == "1"){
							    if(inicio.getTime() == fim.getTime() ) {
						            focusField = form[oCompararDatasMaisDiferenca[x][0]];
							    } 
							    else {
						    	    isValid = false;
						            fields[i++] = oCompararDatasMaisDiferenca[x][1];
							    }
						    } 
						    else {
						    	if(opcao == "2") {
								    if(inicio.getTime() < fim.getTime() ) {
							            focusField = form[oCompararDatasMaisDiferenca[x][0]];
								    } 
								    else {
						    		    isValid = false;
							            fields[i++] = oCompararDatasMaisDiferenca[x][1];
							    	}
						    	} 
						    	else {
						    		if(opcao == "3") {
									    if(inicio.getTime() <= fim.getTime() ) {
				                		    focusField = form[oCompararDatasMaisDiferenca[x][0]];
									    } 
									    else {
						    			    isValid = false;
							                fields[i++] = oCompararDatasMaisDiferenca[x][1];
							    		}
							    	} 
							    	else {
							    		if(opcao == "4") {
										    if(inicio.getTime() == fim.getTime() ) {
					            		        focusField = form[oCompararDatasMaisDiferenca[x][0]];
										    } 
										    else {
							    			    isValid = false;
								                fields[i++] = oCompararDatasMaisDiferenca[x][1];
						    				}		
							    		} 
							    		else {
							    			if(opcao == "5") {
											    if(inicio.getTime() <=  fim.getTime()) {
										            focusField = form[oCompararDatasMaisDiferenca[x][0]];
											    } 
											    else {
								    			    isValid = false;
						  			                fields[i++] = oCompararDatasMaisDiferenca[x][1];
									    		}		
							    			} 
					    					else {
							    				if(opcao == "6") {
												    if(inicio.getTime() < fim.getTime()) {
											            focusField = form[oCompararDatasMaisDiferenca[x][0]];
												    } 
												    else {
									    			    isValid = false;
							   			                fields[i++] = oCompararDatasMaisDiferenca[x][1];
										    		}				
							    				} else {
							    					if(opcao == "7"){
														fator = parseInt(fatorMultiplicacao,10);
														dataMais = new Date();
														dataMais.setTime(fim.getTime() + fator*86400000);
														if(inicio.getTime() <= dataMais.getTime()){
												            focusField = form[oCompararDatasMaisDiferenca[x][0]];
													    } 
													    else {
										    			    isValid = false;
								   			                fields[i++] = oCompararDatasMaisDiferenca[x][1];
											    		}				
														
							    					}
							    				}
							    			}
							    			
						    			}
							    	}
						    	}
						    } 
		                }
		            }
		            if (fields.length > 0) {
		                focusField.focus();
					    alert(fields.join('\n'));
					}
					return isValid;
		        }
		
				function trim(s) {
				    while (s.substring(0,1) == " ") {
				        s = s.substring(1,s.length);
				    }
				    while (s.substring(s.length-1,s.length) == " ") {
				        s = s.substring(0,s.length-1);
				    }
				    return s;
				}            
		    ]]>
          </javascript>


      </validator>
		
	  <validator name="moeda"
          classname="org.apache.struts.validator.FieldChecks"
          method="validateMoeda"
          methodParams="java.lang.Object,
  	               org.apache.commons.validator.ValidatorAction,
		           org.apache.commons.validator.Field,
		           org.apache.struts.action.ActionErrors,
		           javax.servlet.http.HttpServletRequest"
          depends="" msg="">
	      <javascript>
	      	<![CDATA[
			    function validateMoeda(form) {
					var bValid = true;
					var focusField = null;
					var i = 0;
					var fields = new Array();
					var formName = form.getAttributeNode("name");
			
					oMoeda = eval('new ' + formName.value + '_moeda()');
					for (x in oMoeda) {
						var field = form[oMoeda[x][0]];
						
						if ((field.type == 'hidden' ||
							field.type == 'text' ||
							field.type == 'textarea' ||
							field.type == 'select-one' ||
							field.type == 'radio') &&
							field.disabled == false) {
					
							var value = '';
							// get field's value
							if (field.type == "select-one") {
								var si = field.selectedIndex;
								if (si >= 0) {
									value = field.options[si].value;
								}
							} else {
								value = field.value;
							}
					
							if (value.length > 0) {
								  // substitui '.' por '' e ',' por '.'
								  value = value.replace(".","").replace(",",".");

								// remove '.' before checking digits
								var tempArray = value.split('.');
								//Strip off leading '0'
								var zeroIndex = 0;
								var joinedString= tempArray.join('');
								while (joinedString.charAt(zeroIndex) == '0') {
									zeroIndex++;
								}
								var noZeroString = joinedString.substring(zeroIndex,joinedString.length);
			
								if (!isAllDigits(noZeroString)) {
									bValid = false;
									if (i == 0) {
										focusField = field;
									}
									fields[i++] = oMoeda[x][1];
			
								} else {
								var iValue = parseFloat(value);
								if (isNaN(iValue)) {
									if (i == 0) {
										focusField = field;
									}
									fields[i++] = oMoeda[x][1];
									bValid = false;
								}
								}
							}
						}
					}
					if (fields.length > 0) {
					   focusField.focus();
					   alert(fields.join('\n'));
					}
					return bValid;
				}		
		    ]]>
          </javascript>	
		</validator>		

   </global>

</form-validation>
